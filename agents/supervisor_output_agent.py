import json
import logging
from fastmcp import FastMCP
from langchain_openai import ChatOpenAI
from core.observability import ls_context

log = logging.getLogger("SupervisorOutputAgent")

# =============================================================
# ‚öôÔ∏è CONFIGURACI√ìN BASE
# =============================================================

mcp = FastMCP("SupervisorOutputAgent")
llm = ChatOpenAI(model="gpt-4.1-mini", temperature=0.3)

# Cargar prompt desde archivo
with open("prompts/supervisor_output_prompt.txt", "r", encoding="utf-8") as f:
    SUPERVISOR_OUTPUT_PROMPT = f.read()

# =============================================================
# üß† FUNCI√ìN PRINCIPAL DE AUDITOR√çA
# =============================================================

async def _auditar_respuesta_func(input_usuario: str, respuesta_agente: str) -> str:
    """Eval√∫a si la respuesta del agente es adecuada, segura y coherente."""
    with ls_context(
        name="SupervisorOutputAgent.auditar_respuesta",
        metadata={"input_usuario": input_usuario, "respuesta_agente": respuesta_agente},
        tags=["supervisor", "output"],
    ):
        try:
            content = (
                f"Mensaje del hu√©sped:\n{input_usuario}\n\n"
                f"Respuesta del agente:\n{respuesta_agente}"
            )

            response = await llm.ainvoke([
                {"role": "system", "content": SUPERVISOR_OUTPUT_PROMPT},
                {"role": "user", "content": content},
            ])

            output = (response.content or "").strip()
            log.info(f"üß† [SupervisorOutputAgent] salida modelo:\n{output}")
            return output

        except Exception as e:
            log.error(f"‚ùå Error en SupervisorOutputAgent: {e}", exc_info=True)
            fallback = {
                "estado": "Revisi√≥n Necesaria",
                "motivo": "Error interno al auditar la respuesta",
                "sugerencia": "Revisi√≥n manual por el encargado"
            }
            return f"Interno({json.dumps(fallback, ensure_ascii=False)})"

auditar_respuesta = mcp.tool()(_auditar_respuesta_func)

# =============================================================
# üö¶ CLASE PRINCIPAL
# =============================================================

class SupervisorOutputAgent:
    async def validate(self, user_input: str, agent_response: str) -> dict:
        """Normaliza la salida del modelo y aplica tolerancia contextual."""
        try:
            raw = await _auditar_respuesta_func(user_input, agent_response)
            salida = (raw or "").strip()

            # =====================================================
            # üß© Detecci√≥n temprana de respuestas v√°lidas extensas
            # =====================================================
            conversational_tokens = [
                "¬øte gustar√≠a", "¬øprefieres", "¬ødeseas", "¬øquieres", "puedo ayudarte",
                "¬ønecesitas m√°s informaci√≥n"
            ]
            if (
                any(t in agent_response.lower() for t in conversational_tokens)
                or any(token in agent_response for token in ["1.", "2.", "‚Ä¢", "-", "\n\n"])
                or len(agent_response) > 80
            ):
                log.info("ü©µ Respuesta extensa o conversacional ‚Üí tolerancia activa")

            # =====================================================
            # Caso 1: salida directa ‚ÄúAprobado‚Äù
            # =====================================================
            if salida.lower().startswith("aprobado"):
                return {"estado": "Aprobado", "motivo": "Respuesta correcta aprobada"}

            # =====================================================
            # Caso 2: salida tipo Interno({...})
            # =====================================================
            if salida.startswith("Interno(") and salida.endswith(")"):
                inner = salida[len("Interno("):-1].strip()
                try:
                    data = json.loads(inner)
                    estado = str(data.get("estado", "")).lower()

                    # Si el modelo marca rechazo pero la respuesta es segura o amable
                    if any(pal in estado for pal in ["rechazado", "no aprobado"]):
                        if (
                            len(agent_response.split()) > 8
                            and not any(bad in agent_response.lower() for bad in ["insulto", "odio", "violencia", "sexual"])
                        ):
                            log.warning("‚ö†Ô∏è Rechazo leve detectado, pero la respuesta es coherente ‚Üí Aprobada.")
                            return {
                                "estado": "Aprobado",
                                "motivo": "Rechazo leve corregido por tolerancia contextual",
                                "sugerencia": ""
                            }
                        log.warning(f"üö® Escalaci√≥n detectada por SupervisorOutput: {data}")
                        return data

                    if "revisi√≥n" in estado:
                        return {"estado": "Revisi√≥n Necesaria", "motivo": data.get("motivo", "")}

                    return {"estado": "Aprobado", "motivo": data.get("motivo", "Aprobado por defecto")}

                except json.JSONDecodeError:
                    log.warning("‚ö†Ô∏è JSON inv√°lido dentro de Interno(), aprobado por seguridad.")
                    return {"estado": "Aprobado", "motivo": "Formato irregular pero sin indicios negativos"}

            # =====================================================
            # Caso 3: salida tipo texto con ‚ÄúEstado: ...‚Äù
            # =====================================================
            if "estado:" in salida.lower():
                estado_line = next((l for l in salida.splitlines() if "estado:" in l.lower()), "")
                estado_val = estado_line.lower()

                if any(k in estado_val for k in ["rechazado", "no aprobado"]):
                    if (
                        len(agent_response) > 80
                        or any(t in agent_response for t in ["1.", "2.", "‚Ä¢", "-", "\n\n"])
                        or any(x in agent_response.lower() for x in conversational_tokens)
                    ):
                        log.info("ü©µ Rechazo ignorado (respuesta extensa o lista detectada).")
                        return {"estado": "Aprobado", "motivo": "Respuesta extensa aceptada"}
                    return {"estado": "Rechazado", "motivo": "Modelo marc√≥ expl√≠citamente rechazo"}

                if "revisi√≥n" in estado_val:
                    return {"estado": "Revisi√≥n Necesaria", "motivo": "Modelo solicita revisi√≥n"}

                return {"estado": "Aprobado", "motivo": "Modelo indic√≥ aprobaci√≥n textual"}

            # =====================================================
            # Caso 4: salida libre con ‚Äúaprobado‚Äù
            # =====================================================
            if "aprobado" in salida.lower() and "rechazado" not in salida.lower():
                return {"estado": "Aprobado", "motivo": "Texto indica aprobaci√≥n"}

            # =====================================================
            # Caso 5: formato desconocido ‚Üí aprobado por seguridad
            # =====================================================
            log.warning(f"‚ö†Ô∏è Formato no conforme ‚Üí aprobado por defecto.\nSalida: {salida}")
            return {"estado": "Aprobado", "motivo": "Formato no conforme pero sin errores detectados"}

        except Exception as e:
            log.error(f"‚ö†Ô∏è Error en validate (output): {e}", exc_info=True)
            return {"estado": "Aprobado", "motivo": "Error interno, aprobado por seguridad"}

# =============================================================
# üöÄ ENTRYPOINT MCP
# =============================================================

if __name__ == "__main__":
    print("‚úÖ SupervisorOutputAgent operativo (modo MCP)")
    mcp.run(transport="stdio", show_banner=False)
