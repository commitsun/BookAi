# core/escalation_manager.py
import os
import time
import logging
import requests
from core.notification import notify_encargado

pending_escalations: dict[str, dict] = {}

WHATSAPP_TOKEN = os.getenv("WHATSAPP_TOKEN")
WHATSAPP_PHONE_ID = os.getenv("WHATSAPP_PHONE_ID")


def send_whatsapp_text(user_id: str, text: str):
    """Env√≠a un mensaje de texto b√°sico a WhatsApp usando la API de Meta."""
    if not WHATSAPP_TOKEN or not WHATSAPP_PHONE_ID:
        logging.error("‚ùå Falta WHATSAPP_TOKEN o WHATSAPP_PHONE_ID.")
        return

    url = f"https://graph.facebook.com/v19.0/{WHATSAPP_PHONE_ID}/messages"
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json",
    }
    payload = {
        "messaging_product": "whatsapp",
        "to": user_id,
        "type": "text",
        "text": {"body": text},
    }

    try:
        r = requests.post(url, headers=headers, json=payload, timeout=15)
        logging.info(f"üì§ WhatsApp ‚Üí {user_id} (HTTP {r.status_code})")
    except Exception as e:
        logging.error(f"‚ö†Ô∏è Error enviando WhatsApp: {e}", exc_info=True)


async def mark_pending(conversation_id: str, user_message: str):
    """Marca conversaci√≥n como pendiente, avisa al cliente y notifica al encargado."""
    pending_escalations[conversation_id] = {
        "question": user_message,
        "ts": time.time(),
        "channel": "whatsapp",
    }

    # üïì Avisar al cliente
    send_whatsapp_text(
        conversation_id,
        "üïì Estamos consultando esta informaci√≥n con el encargado del hotel. "
        "Te responderemos en unos minutos. Gracias por tu paciencia."
    )

    # üì¢ Avisar al encargado
    aviso = (
        f"üì© *El cliente {conversation_id} pregunt√≥:*\n"
        f"‚Äú{user_message}‚Äù\n\n"
        "‚úâÔ∏è Escribe tu respuesta directamente aqu√≠ y el sistema la enviar√° al cliente."
    )
    await notify_encargado(aviso)


async def resolve_from_encargado(conversation_id: str, raw_text: str, hybrid_agent):
    """Procesa la respuesta del encargado, la reformatea y la env√≠a al hu√©sped."""
    logging.info(f"‚úâÔ∏è Resolviendo respuesta manual para {conversation_id}")

    if conversation_id not in pending_escalations:
        await notify_encargado("‚ö†Ô∏è No hab√≠a conversaci√≥n pendiente, pero la respuesta se enviar√° igualmente.")

    try:
        formatted = await hybrid_agent.process_message(
            f"El encargado del hotel responde al cliente con este texto:\n\n{raw_text}\n\n"
            f"Reformula la respuesta con tono amable, profesional y natural, "
            f"sin alterar el contenido original."
        )
    except Exception as e:
        logging.error(f"‚ùå Error al reformatear respuesta: {e}")
        formatted = raw_text

    # üì§ Enviar al hu√©sped
    send_whatsapp_text(conversation_id, formatted)
    pending_escalations.pop(conversation_id, None)
    logging.info(f"‚úÖ Conversaci√≥n {conversation_id} resuelta y enviada.")

    # ‚úÖ Confirmar al encargado
    confirmacion = (
        f"‚úÖ Tu respuesta fue enviada correctamente al cliente *{conversation_id}*.\n\n"
        f"üßæ *Mensaje final enviado:*\n{formatted}"
    )
    await notify_encargado(confirmacion)
