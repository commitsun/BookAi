name: "🚀 Deploy to EC2"

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: "🧰 Checkout repository"
        uses: actions/checkout@v4

      - name: "🔐 Configure SSH access"
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          cat > ~/.ssh/config <<'CFG'
          Host ec2
            HostName ${{ secrets.EC2_HOST }}
            User ${{ secrets.EC2_USER }}
            IdentityFile ~/.ssh/id_ed25519
            StrictHostKeyChecking no
          CFG

      - name: "🧩 Create .env file locally"
        run: |
          echo "ENDPOINT_MCP=${{ secrets.ENDPOINT_MCP }}" > .env
          echo "LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}" >> .env
          echo "LANGCHAIN_ENDPOINT=${{ secrets.LANGCHAIN_ENDPOINT }}" >> .env
          echo "LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT }}" >> .env
          echo "LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2 }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "TELEGRAM_ENCARGADO_CHAT_ID=${{ secrets.TELEGRAM_ENCARGADO_CHAT_ID }}" >> .env
          echo "WHATSAPP_PHONE_ID=${{ secrets.WHATSAPP_PHONE_ID }}" >> .env
          echo "WHATSAPP_TOKEN=${{ secrets.WHATSAPP_TOKEN }}" >> .env
          echo "WHATSAPP_VERIFY_TOKEN=${{ secrets.WHATSAPP_VERIFY_TOKEN }}" >> .env

      - name: "📦 Sync repository and .env to EC2"
        run: |
          echo "🔄 Syncing files to EC2..."
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ ec2:/home/${{ secrets.EC2_USER }}/BookAI

      - name: "🐳 Rebuild and restart Docker containers on EC2"
        run: |
          ssh ec2 '
            set -e
            cd ~/BookAI
            echo "🧹 Stopping old containers..."
            docker compose down || true
            echo "🧱 Rebuilding Docker images..."
            docker compose build --no-cache
            echo "🚀 Starting containers..."
            docker compose up -d
            echo "✅ Deployment successful!"
          '
