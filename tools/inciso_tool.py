#inciso_tool.py
"""
üîî Inciso Tool - Env√≠a mensajes intermedios al usuario
=====================================================
Esta herramienta permite al agente Main enviar mensajes de cortes√≠a
o actualizaciones de estado al usuario mientras procesa su solicitud
en segundo plano (por ejemplo, mientras consulta con el encargado).
"""

import logging
from typing import Optional
from pydantic import BaseModel, Field
from langchain.tools import StructuredTool

log = logging.getLogger("IncisoTool")


class IncisoInput(BaseModel):
    """Input schema para la herramienta Inciso."""
    mensaje: str = Field(
        description="Mensaje intermedio a enviar al usuario (ej: 'Un momento, estoy consultando con el encargado...')"
    )


class IncisoTool:
    """
    Herramienta que permite enviar mensajes intermedios al usuario.
    Se usa cuando el agente necesita tiempo para procesar (ej: consulta con encargado).
    """
    
    def __init__(self, send_callback=None):
        """
        Args:
            send_callback: Funci√≥n que env√≠a el mensaje al usuario.
                          Firma: send_callback(chat_id: str, message: str)
        """
        self.send_callback = send_callback
        log.info("‚úÖ IncisoTool inicializado")
    
    def _send_inciso(self, mensaje: str) -> str:
        """
        Env√≠a un mensaje intermedio al usuario.
        
        Args:
            mensaje: Texto del mensaje intermedio
            
        Returns:
            Confirmaci√≥n de env√≠o
        """
        try:
            if not self.send_callback:
                log.warning("‚ö†Ô∏è No hay callback configurado para enviar inciso")
                return "‚ö†Ô∏è Mensaje guardado pero no se pudo enviar (falta configuraci√≥n de canal)"
            
            # Enviar mensaje a trav√©s del callback
            self.send_callback(mensaje)
            log.info(f"üì§ Inciso enviado: {mensaje[:50]}...")
            
            return f"‚úÖ Mensaje intermedio enviado al usuario: '{mensaje}'"
            
        except Exception as e:
            log.error(f"‚ùå Error al enviar inciso: {e}")
            return f"‚ùå Error al enviar mensaje intermedio: {str(e)}"
    
    def as_tool(self) -> StructuredTool:
        """
        Convierte esta clase en una herramienta compatible con LangChain.
        
        Returns:
            StructuredTool configurado para usar con agentes
        """
        return StructuredTool(
            name="Inciso",
            description=(
                "Env√≠a un mensaje intermedio de cortes√≠a al usuario mientras procesas su solicitud. "
                "√ösala cuando necesites tiempo para consultar informaci√≥n (ej: con el encargado) "
                "o cuando el proceso tarde m√°s de lo esperado. "
                "Ejemplos: 'üïì Un momento por favor, estoy consultando...', "
                "'‚è≥ Dame un segundo mientras reviso esa informaci√≥n...'"
            ),
            func=self._send_inciso,
            args_schema=IncisoInput,
        )


def create_inciso_tool(send_callback=None) -> StructuredTool:
    """
    Factory function para crear la herramienta Inciso.
    
    Args:
        send_callback: Funci√≥n para enviar mensajes al usuario
        
    Returns:
        StructuredTool configurado
    """
    tool_instance = IncisoTool(send_callback=send_callback)
    return tool_instance.as_tool()